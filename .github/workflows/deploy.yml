name: Continuous Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Cache Node Modules
        uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node Modules
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install --legacy-peer-deps

      - name: Build
        run: npm run buildFrontend
        env:
          NODE_ENV: production
          GRAPHQL_ENDPOINT: ${{ secrets.GRAPHQL_ENDPOINT }}
          WEBSOCKET_ENDPOINT: ${{ secrets.WEBSOCKET_ENDPOINT }}

      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4.2.5
        with:
          branch: gh-pages
          folder: dist/

  deploy-aws-lambda:
    name: Deploy AWS Lambda
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Cache Node Modules
        uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node Modules
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install --legacy-peer-deps

      - name: Create Quaesta .env File
        uses: DeveloperRic/action-create-env@v1.0.4
        with:
          full_text: ""
          include_env_vars: true
        env:
          DDB_ENDPOINT: ${{ secrets.DDB_ENDPOINT }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          TWITCH_CLIENT_ID: ${{ secrets.TWITCH_CLIENT_ID }}
          TWITCH_CLIENT_SECRET: ${{ secrets.TWITCH_CLIENT_SECRET }}
          AUTH_KEY: ${{ secrets.AUTH_KEY }}
          PASSWORD_KEY: ${{ secrets.PASSWORD_KEY }}

      - name: Get Directory Contents
        run: ls -la && pwd && cat .env

      - name: Deploy
        run: npm run deployLambda
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
