type User {
	name: String
	avatar: String
	email: String!
	username: String
	password: String
	friends: [User!]!
	incomingFriendRequests: [User!]!
	outgoingFriendRequests: [User!]!
	games: [Game!]!
}

type Game {
	id: ID!
	name: String!
	cover: String
	genres: [String]
	companies: [String]
	status: GAME_STATUS
	dateAdded: DateTime
	dateCompleted: DateTime
	userReview: Review
}

type Review {
	rating: Int!
	title: String
	description: String
}

enum GAME_STATUS {
	BACKLOG
	IN_PROGRESS
	COMPLETED
}

input UserValuePayload {
	type: UserValue!
	value: String!
}

scalar DateTime
scalar AuthorizationToken
scalar UserValue

type Query {
	selfLookup: User
	gameLookup(name: String!): Game
}

type Mutation {
	createUser(email: String!, username: String!, password: String!): AuthorizationToken!
	loginUser(userValue: UserValuePayload!, password: String!): AuthorizationToken
	editUser(userValues: [UserValuePayload!]!): User!
	sendResetPasswordEmail(userValue: UserValuePayload!): Boolean
	deleteUser: Boolean
	requestFriend(friendUsername: String!): User
	resolveRequestFriend(friendUsername: String!, choice: Boolean!): User
	testMutation: Boolean
}

type Subscription {
	subscriptionShowcase: String
}
